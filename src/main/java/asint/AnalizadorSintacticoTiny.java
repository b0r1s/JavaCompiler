
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Jun 16 01:39:03 CEST 2020
//----------------------------------------------------

package asint;

import alex.TokenValue;
import alex.UnidadLexica;
import ast.ASTiny;
import ast.Aux.Corchetes;
import ast.Aux.IdCorchTemp;
import ast.Expr.Expr;
import ast.Extra.ExtraValor;
import ast.Extra.ExtraValorPunto;
import ast.Extra.VValorExtraArray;
import ast.General.*;
import ast.Ins.Declar;
import ast.Ins.IAsig;
import ast.Ins.Ins;
import ast.Tipo.TSimpleOArray;
import ast.Tipo.Tipo;
import ast.Var.VValor;
import ast.Var.VValorMet;
import errors.GestionErroresTiny;
import java_cup.runtime.Symbol;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Jun 16 01:39:03 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\004\000\002\006\003\000" +
    "\002\005\004\000\002\005\005\000\002\005\002\000\002" +
    "\005\004\000\002\010\004\000\002\010\003\000\002\010" +
    "\003\000\002\007\011\000\002\007\007\000\002\007\005" +
    "\000\002\007\004\000\002\012\004\000\002\012\003\000" +
    "\002\012\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\056\004\000\002\013" +
    "\004\000\002\013\002\000\002\042\005\000\002\045\003" +
    "\000\002\045\002\000\002\045\003\000\002\014\004\000" +
    "\002\014\002\000\002\015\005\000\002\015\002\000\002" +
    "\015\004\000\002\015\003\000\002\016\004\000\002\017" +
    "\004\000\002\017\002\000\002\021\004\000\002\021\003" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\002\000\002\027\003\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\003\000\002\030\005" +
    "\000\002\031\007\000\002\031\003\000\002\032\005\000" +
    "\002\032\005\000\002\032\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\003" +
    "\000\002\035\005\000\002\035\005\000\002\035\003\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\003\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\003" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\006\000\002\041\003\000\002\041\003\000\002\041\004" +
    "\000\002\041\003\000\002\043\006\000\002\043\004\000" +
    "\002\043\005\000\002\043\003\000\002\044\003\000\002" +
    "\044\007\000\002\044\005\000\002\046\006\000\002\046" +
    "\004\000\002\047\005\000\002\047\002\000\002\047\004" +
    "\000\002\053\004\000\002\053\002\000\002\053\004\000" +
    "\002\052\004\000\002\051\003\000\002\051\002\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\004\000\002\054\004\000\002\054\002\000\002\055\005" +
    "\000\002\055\002\000\002\055\005\000\002\024\012\000" +
    "\002\024\007\000\002\024\006\000\002\024\005\000\002" +
    "\024\004\000\002\020\006\000\002\020\002\000\002\020" +
    "\004\000\002\025\015\000\002\025\013\000\002\025\012" +
    "\000\002\025\010\000\002\025\007\000\002\025\006\000" +
    "\002\025\004\000\002\026\004\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\010\002\ufffe\003\005\022\010\001\002\000" +
    "\010\002\ufffe\003\005\022\010\001\002\000\022\003\ufff9" +
    "\004\ufff9\006\ufff9\011\ufff9\013\ufff9\015\ufff9\017\ufff9\057" +
    "\ufff9\001\002\000\022\003\032\004\035\006\025\011\017" +
    "\013\030\015\034\017\026\057\ufff6\001\002\000\004\002" +
    "\016\001\002\000\006\003\012\004\013\001\002\000\004" +
    "\002\001\001\002\000\022\003\ufffa\004\ufffa\006\ufffa\011" +
    "\ufffa\013\ufffa\015\ufffa\017\ufffa\057\ufffa\001\002\000\006" +
    "\003\015\056\014\001\002\000\022\003\ufffc\004\ufffc\006" +
    "\ufffc\011\ufffc\013\ufffc\015\ufffc\017\ufffc\057\ufffc\001\002" +
    "\000\022\003\ufffb\004\ufffb\006\ufffb\011\ufffb\013\ufffb\015" +
    "\ufffb\017\ufffb\057\ufffb\001\002\000\004\002\000\001\002" +
    "\000\072\003\uffe9\004\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\001\002\000\022\003\ufff3\004" +
    "\ufff3\006\ufff3\011\ufff3\013\ufff3\015\ufff3\017\ufff3\057\ufff3" +
    "\001\002\000\022\003\032\004\035\006\025\011\017\013" +
    "\030\015\034\017\026\057\ufff6\001\002\000\004\061\340" +
    "\001\002\000\072\003\uffe4\004\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\040\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000\070\003" +
    "\uffec\004\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\001\002\000\072\003\uffea\004\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\062\uffea\001\002\000\070" +
    "\003\uffeb\004\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\001\002\000\004\057\336\001\002\000\072\003" +
    "\uffe8\004\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\001\002\000\012\003\uffc9\047\333\053\uffc9" +
    "\061\uffc9\001\002\000\024\003\ufff2\004\ufff2\006\ufff2\011" +
    "\ufff2\013\ufff2\015\ufff2\017\ufff2\057\ufff2\061\332\001\002" +
    "\000\004\004\331\001\002\000\072\003\uffe7\004\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\045" +
    "\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\001" +
    "\002\000\012\003\036\004\uffe4\052\042\054\040\001\002" +
    "\000\022\003\uffee\004\uffee\006\uffee\011\uffee\013\uffee\015" +
    "\uffee\017\uffee\057\uffee\001\002\000\074\003\uffe4\004\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\040\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\001\002\000\044\003\325\004\063\005\074\007" +
    "\077\010\110\012\072\014\055\016\056\020\100\021\103" +
    "\037\120\040\102\044\116\045\053\046\064\052\061\055" +
    "\uffe1\001\002\000\072\003\uffe6\004\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\001\002\000\022" +
    "\003\044\004\046\006\025\011\017\013\030\015\034\017" +
    "\026\053\uffde\001\002\000\010\003\317\053\uffdc\060\315" +
    "\001\002\000\022\003\uffef\004\uffef\006\uffef\011\uffef\013" +
    "\uffef\015\uffef\017\uffef\057\uffef\001\002\000\004\004\314" +
    "\001\002\000\072\003\uffe4\004\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\040\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000\004\053" +
    "\050\001\002\000\006\003\052\056\051\001\002\000\064" +
    "\003\101\004\063\005\074\006\025\007\077\010\110\011" +
    "\017\012\072\013\030\014\055\015\034\016\056\017\026" +
    "\020\100\021\103\023\076\024\073\026\066\037\120\040" +
    "\102\044\116\045\053\046\064\052\061\057\uffd7\001\002" +
    "\000\022\003\ufff0\004\ufff0\006\ufff0\011\ufff0\013\ufff0\015" +
    "\ufff0\017\ufff0\057\ufff0\001\002\000\026\004\063\005\074" +
    "\007\077\010\110\012\072\014\055\016\056\020\100\021" +
    "\103\052\061\001\002\000\010\003\uffd1\053\uffd1\061\uffd1" +
    "\001\002\000\062\003\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\045\uffa6\046\uffa6\050\uffa6\051" +
    "\uffa6\053\uffa6\055\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\001\002\000\062\003\uffa5\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\045\uffa5\046\uffa5\050\uffa5\051" +
    "\uffa5\053\uffa5\055\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\001\002\000\004\057\312\001\002\000\064\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\026\uffd5\037\uffd5\040\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\052\uffd5\057\uffd5\001\002\000\040\004" +
    "\063\005\074\007\077\010\110\012\072\014\055\016\056" +
    "\020\100\021\103\037\120\040\102\044\116\045\053\046" +
    "\064\052\061\001\002\000\010\003\uffcd\053\uffcd\061\uffcd" +
    "\001\002\000\072\003\uffe4\004\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\302\053\uffe4\054\040\055\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000\026\004" +
    "\063\005\074\007\077\010\110\012\072\014\055\016\056" +
    "\020\100\021\103\052\061\001\002\000\062\003\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\045" +
    "\uffa0\046\uffa0\050\uffa0\051\uffa0\053\uffa0\055\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\001\002\000\006\003\260\052" +
    "\261\001\002\000\010\003\uffd0\053\uffd0\061\uffd0\001\002" +
    "\000\064\003\101\004\063\005\074\006\025\007\077\010" +
    "\110\011\017\012\072\013\030\014\055\015\034\016\056" +
    "\017\026\020\100\021\103\023\076\024\073\026\066\037" +
    "\120\040\102\044\116\045\053\046\064\052\061\057\uffd7" +
    "\001\002\000\056\003\uff9b\004\uffec\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\043\uff9b\045\uff9b\046\uff9b\047" +
    "\255\050\uff9b\053\uff9b\061\uff9b\062\uff9b\001\002\000\062" +
    "\003\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7\053\uffa7\055" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\001\002\000\006" +
    "\003\235\052\236\001\002\000\062\003\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\045\uffa2\046" +
    "\uffa2\050\uffa2\051\uffa2\053\uffa2\055\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\001\002\000\064\003\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023" +
    "\uffd4\024\uffd4\026\uffd4\037\uffd4\040\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\052\uffd4\057\uffd4\001\002\000\046\003\uff74\004" +
    "\063\005\074\007\077\010\110\012\072\014\055\016\056" +
    "\020\100\021\103\037\120\040\102\044\116\045\053\046" +
    "\064\052\061\053\uff74\061\uff74\001\002\000\062\003\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\045\uffa9\046\uffa9\050\uffa9\051\uffa9\053\uffa9\055\uffa9\057" +
    "\uffa9\060\uffa9\061\uffa9\062\uffa9\001\002\000\020\003\207" +
    "\004\046\006\025\011\017\013\030\015\034\017\026\001" +
    "\002\000\064\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\037\uffd2\040\uffd2\044\uffd2\045\uffd2\046\uffd2\052\uffd2\057" +
    "\uffd2\001\002\000\026\004\063\005\074\007\077\010\110" +
    "\012\072\014\055\016\056\020\100\021\103\052\061\001" +
    "\002\000\062\003\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3" +
    "\053\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\001" +
    "\002\000\006\003\204\061\205\001\002\000\062\003\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\045\203\046\202\050\uffaa\051\uffaa\053\uffaa\055\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\001\002\000\056\003\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\050\uffae\051\uffae\053\uffae\055\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\123\001\002\000\054\003\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\050\uffb4\051\uffb4" +
    "\053\uffb4\055\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002\000" +
    "\062\003\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\053\uffa8" +
    "\055\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\001\002\000" +
    "\054\003\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\165\042" +
    "\164\043\163\050\uffb8\051\uffb8\053\uffb8\055\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\001\002\000\046\003\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\160\040\161\050\uffbb\051\uffbb\053\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\001\002\000\042\003\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\153\034\154\035\155\036" +
    "\156\050\uffc0\051\uffc0\053\uffc0\055\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\032\003\uffc3\027\uffc3\030\uffc3\031" +
    "\150\032\151\050\uffc3\051\uffc3\053\uffc3\055\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\001\002\000\024\003\uffc6\027\146\030" +
    "\145\050\144\053\uffc6\055\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\001\002\000\040\004\063\005\074\007\077\010\110\012" +
    "\072\014\055\016\056\020\100\021\103\037\120\040\102" +
    "\044\116\045\053\046\064\052\061\001\002\000\010\003" +
    "\uffcb\053\uffcb\061\uffcb\001\002\000\026\004\063\005\074" +
    "\007\077\010\110\012\072\014\055\016\056\020\100\021" +
    "\103\052\061\001\002\000\062\003\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\045\uff9b\046\uff9b" +
    "\050\uff9b\051\uff9b\053\uff9b\055\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\001\002\000\056\003\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\050\uffb0\051\uffb0" +
    "\053\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0\062\123\001" +
    "\002\000\006\003\125\004\126\001\002\000\056\003\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\050\uffab\051\uffab\053\uffab\055\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\001\002\000\056\003\uff97\027\uff97\030\uff97" +
    "\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\050\uff97\051\uff97" +
    "\053\uff97\055\uff97\057\uff97\060\uff97\061\uff97\062\uff97\001" +
    "\002\000\062\003\uff95\027\uff95\030\uff95\031\uff95\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\050\uff95\051\uff95\052\130\053\uff95" +
    "\054\uff95\055\uff95\057\uff95\060\uff95\061\uff95\062\uff95\001" +
    "\002\000\060\003\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\050\uffe4\051\uffe4\053\uffe4\054\040" +
    "\055\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000" +
    "\044\003\133\004\063\005\074\007\077\010\110\012\072" +
    "\014\055\016\056\020\100\021\103\037\120\040\102\044" +
    "\116\045\053\046\064\052\061\053\uff88\001\002\000\004" +
    "\053\141\001\002\000\010\053\uff86\057\uff86\060\134\001" +
    "\002\000\060\003\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\050\uff94\051\uff94\053\uff94\054\uff94" +
    "\055\uff94\057\uff94\060\uff94\061\uff94\062\uff94\001\002\000" +
    "\040\004\063\005\074\007\077\010\110\012\072\014\055" +
    "\016\056\020\100\021\103\037\120\040\102\044\116\045" +
    "\053\046\064\052\061\001\002\000\006\053\uff89\057\uff89" +
    "\001\002\000\012\003\140\053\uff86\057\uff86\060\134\001" +
    "\002\000\006\053\uff87\057\uff87\001\002\000\006\053\uff85" +
    "\057\uff85\001\002\000\060\003\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\050\uff96\051\uff96\053" +
    "\uff96\054\uff96\055\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\001\002\000\056\003\uff98\027\uff98\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\050\uff98\051\uff98\053\uff98\055" +
    "\uff98\057\uff98\060\uff98\061\uff98\062\uff98\001\002\000\054" +
    "\003\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\050\uffb3\051\uffb3\053\uffb3\055\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\001\002\000\040\004\063\005\074\007\077" +
    "\010\110\012\072\014\055\016\056\020\100\021\103\037" +
    "\120\040\102\044\116\045\053\046\064\052\061\001\002" +
    "\000\040\004\063\005\074\007\077\010\110\012\072\014" +
    "\055\016\056\020\100\021\103\037\120\040\102\044\116" +
    "\045\053\046\064\052\061\001\002\000\040\004\063\005" +
    "\074\007\077\010\110\012\072\014\055\016\056\020\100" +
    "\021\103\037\120\040\102\044\116\045\053\046\064\052" +
    "\061\001\002\000\032\003\uffc4\027\uffc4\030\uffc4\031\150" +
    "\032\151\050\uffc4\051\uffc4\053\uffc4\055\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\001\002\000\040\004\063\005\074\007\077" +
    "\010\110\012\072\014\055\016\056\020\100\021\103\037" +
    "\120\040\102\044\116\045\053\046\064\052\061\001\002" +
    "\000\040\004\063\005\074\007\077\010\110\012\072\014" +
    "\055\016\056\020\100\021\103\037\120\040\102\044\116" +
    "\045\053\046\064\052\061\001\002\000\042\003\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\153\034\154\035\155" +
    "\036\156\050\uffc1\051\uffc1\053\uffc1\055\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\001\002\000\040\004\063\005\074\007\077" +
    "\010\110\012\072\014\055\016\056\020\100\021\103\037" +
    "\120\040\102\044\116\045\053\046\064\052\061\001\002" +
    "\000\040\004\063\005\074\007\077\010\110\012\072\014" +
    "\055\016\056\020\100\021\103\037\120\040\102\044\116" +
    "\045\053\046\064\052\061\001\002\000\040\004\063\005" +
    "\074\007\077\010\110\012\072\014\055\016\056\020\100" +
    "\021\103\037\120\040\102\044\116\045\053\046\064\052" +
    "\061\001\002\000\040\004\063\005\074\007\077\010\110" +
    "\012\072\014\055\016\056\020\100\021\103\037\120\040" +
    "\102\044\116\045\053\046\064\052\061\001\002\000\046" +
    "\003\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\160\040\161\050\uffbc\051\uffbc" +
    "\053\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002\000" +
    "\040\004\063\005\074\007\077\010\110\012\072\014\055" +
    "\016\056\020\100\021\103\037\120\040\102\044\116\045" +
    "\053\046\064\052\061\001\002\000\040\004\063\005\074" +
    "\007\077\010\110\012\072\014\055\016\056\020\100\021" +
    "\103\037\120\040\102\044\116\045\053\046\064\052\061" +
    "\001\002\000\054\003\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\165\042\164\043\163\050\uffb9\051\uffb9\053\uffb9\055" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\001\002\000\040\004\063" +
    "\005\074\007\077\010\110\012\072\014\055\016\056\020" +
    "\100\021\103\037\120\040\102\044\116\045\053\046\064" +
    "\052\061\001\002\000\040\004\063\005\074\007\077\010" +
    "\110\012\072\014\055\016\056\020\100\021\103\037\120" +
    "\040\102\044\116\045\053\046\064\052\061\001\002\000" +
    "\040\004\063\005\074\007\077\010\110\012\072\014\055" +
    "\016\056\020\100\021\103\037\120\040\102\044\116\045" +
    "\053\046\064\052\061\001\002\000\054\003\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\050\uffb7" +
    "\051\uffb7\053\uffb7\055\uffb7\057\uffb7\060\uffb7\061\uffb7\001" +
    "\002\000\054\003\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\050\uffb6\051\uffb6\053\uffb6\055\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\001\002\000\054\003\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\050" +
    "\uffb5\051\uffb5\053\uffb5\055\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\001\002\000\054\003\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\165\042\164\043\163\050\uffba\051\uffba\053\uffba\055" +
    "\uffba\057\uffba\060\uffba\061\uffba\001\002\000\046\003\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\160\040\161\050\uffbd\051\uffbd\053\uffbd" +
    "\055\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000\046\003" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\160\040\161\050\uffbe\051\uffbe\053" +
    "\uffbe\055\uffbe\057\uffbe\060\uffbe\061\uffbe\001\002\000\046" +
    "\003\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\160\040\161\050\uffbf\051\uffbf" +
    "\053\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002\000" +
    "\042\003\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\153" +
    "\034\154\035\155\036\156\050\uffc2\051\uffc2\053\uffc2\055" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002\000\032\003\uffc5" +
    "\027\uffc5\030\uffc5\031\150\032\151\050\uffc5\051\uffc5\053" +
    "\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\001\002\000\010" +
    "\027\146\030\145\051\200\001\002\000\040\004\063\005" +
    "\074\007\077\010\110\012\072\014\055\016\056\020\100" +
    "\021\103\037\120\040\102\044\116\045\053\046\064\052" +
    "\061\001\002\000\022\003\uffc7\027\146\030\145\053\uffc7" +
    "\055\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002\000\056\003" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\050\uffac\051\uffac\053\uffac\055\uffac\057\uffac\060\uffac" +
    "\061\uffac\062\uffac\001\002\000\056\003\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\050\uffad\051" +
    "\uffad\053\uffad\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\001\002\000\064\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\026" +
    "\uffd3\037\uffd3\040\uffd3\044\uffd3\045\uffd3\046\uffd3\052\uffd3" +
    "\057\uffd3\001\002\000\064\003\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024" +
    "\uffd6\026\uffd6\037\uffd6\040\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\052\uffd6\057\uffd6\001\002\000\056\003\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\050\uffaf\051" +
    "\uffaf\053\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf\062\123" +
    "\001\002\000\062\003\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\045\uff9c\046\uff9c\050\uff9c\051" +
    "\uff9c\053\uff9c\055\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\001\002\000\062\003\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\050\uffa1\051" +
    "\uffa1\053\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\001\002\000\066\003\uff8e\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\045\uff8e\046\uff8e\050\uff8e\051" +
    "\uff8e\052\215\053\uff8e\055\uff8e\056\213\057\uff8e\060\uff8e" +
    "\061\uff8e\062\uff8e\001\002\000\062\003\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\045\uff9e\046" +
    "\uff9e\050\uff9e\051\uff9e\053\uff9e\055\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\001\002\000\046\003\223\004\063\005" +
    "\074\007\077\010\110\012\072\014\055\016\056\020\100" +
    "\021\103\037\120\040\102\044\116\045\053\046\064\052" +
    "\061\056\213\057\uff88\001\002\000\062\003\uff8f\027\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\045\uff8f" +
    "\046\uff8f\050\uff8f\051\uff8f\053\uff8f\055\uff8f\057\uff8f\060" +
    "\uff8f\061\uff8f\062\uff8f\001\002\000\044\003\217\004\063" +
    "\005\074\007\077\010\110\012\072\014\055\016\056\020" +
    "\100\021\103\037\120\040\102\044\116\045\053\046\064" +
    "\052\061\053\uff88\001\002\000\004\053\220\001\002\000" +
    "\062\003\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\053\uff9d" +
    "\055\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\001\002\000" +
    "\062\003\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\053\uff9f" +
    "\055\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\001\002\000" +
    "\006\003\233\057\232\001\002\000\004\057\231\001\002" +
    "\000\062\003\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\045\uff8a\046\uff8a\050\uff8a\051\uff8a\053" +
    "\uff8a\055\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\001\002" +
    "\000\010\003\uff92\057\uff92\060\225\001\002\000\006\003" +
    "\227\056\213\001\002\000\006\003\uff90\057\uff90\001\002" +
    "\000\006\003\uff91\057\uff91\001\002\000\006\003\uff93\057" +
    "\uff93\001\002\000\062\003\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\045\uff8c\046\uff8c\050\uff8c" +
    "\051\uff8c\053\uff8c\055\uff8c\057\uff8c\060\uff8c\061\uff8c\062" +
    "\uff8c\001\002\000\062\003\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\045\uff8d\046\uff8d\050\uff8d" +
    "\051\uff8d\053\uff8d\055\uff8d\057\uff8d\060\uff8d\061\uff8d\062" +
    "\uff8d\001\002\000\062\003\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\045\uff8b\046\uff8b\050\uff8b" +
    "\051\uff8b\053\uff8b\055\uff8b\057\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\001\002\000\010\003\uff75\053\uff75\061\uff75\001\002" +
    "\000\064\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80\010" +
    "\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\uff80\020\uff80\021\uff80\023\uff80\024\uff80\026\uff80\037" +
    "\uff80\040\uff80\044\uff80\045\uff80\046\uff80\052\uff80\057\uff80" +
    "\001\002\000\042\003\240\004\063\005\074\007\077\010" +
    "\110\012\072\014\055\016\056\020\100\021\103\037\120" +
    "\040\102\044\116\045\053\046\064\052\061\001\002\000" +
    "\006\003\241\053\242\001\002\000\064\003\uff81\004\uff81" +
    "\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\023\uff81\024\uff81\026\uff81\037\uff81\040\uff81\044\uff81\045" +
    "\uff81\046\uff81\052\uff81\057\uff81\001\002\000\064\003\uff82" +
    "\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\023\uff82\024\uff82\026\uff82\037\uff82\040\uff82\044" +
    "\uff82\045\uff82\046\uff82\052\uff82\057\uff82\001\002\000\006" +
    "\003\244\056\243\001\002\000\064\003\101\004\063\005" +
    "\074\006\025\007\077\010\110\011\017\012\072\013\030" +
    "\014\055\015\034\016\056\017\026\020\100\021\103\023" +
    "\076\024\073\026\066\037\120\040\102\044\116\045\053" +
    "\046\064\052\061\057\uffd7\001\002\000\064\003\uff83\004" +
    "\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83" +
    "\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\023\uff83\024\uff83\026\uff83\037\uff83\040\uff83\044\uff83" +
    "\045\uff83\046\uff83\052\uff83\057\uff83\001\002\000\004\057" +
    "\246\001\002\000\066\003\uff7e\004\uff7e\005\uff7e\006\uff7e" +
    "\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\023\uff7e\024\uff7e" +
    "\025\247\026\uff7e\037\uff7e\040\uff7e\044\uff7e\045\uff7e\046" +
    "\uff7e\052\uff7e\057\uff7e\001\002\000\006\003\252\056\251" +
    "\001\002\000\064\003\uff84\004\uff84\005\uff84\006\uff84\007" +
    "\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84" +
    "\016\uff84\017\uff84\020\uff84\021\uff84\023\uff84\024\uff84\026" +
    "\uff84\037\uff84\040\uff84\044\uff84\045\uff84\046\uff84\052\uff84" +
    "\057\uff84\001\002\000\064\003\101\004\063\005\074\006" +
    "\025\007\077\010\110\011\017\012\072\013\030\014\055" +
    "\015\034\016\056\017\026\020\100\021\103\023\076\024" +
    "\073\026\066\037\120\040\102\044\116\045\053\046\064" +
    "\052\061\057\uffd7\001\002\000\064\003\uff7d\004\uff7d\005" +
    "\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\023" +
    "\uff7d\024\uff7d\026\uff7d\037\uff7d\040\uff7d\044\uff7d\045\uff7d" +
    "\046\uff7d\052\uff7d\057\uff7d\001\002\000\004\057\254\001" +
    "\002\000\064\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007\uff7f" +
    "\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016" +
    "\uff7f\017\uff7f\020\uff7f\021\uff7f\023\uff7f\024\uff7f\026\uff7f" +
    "\037\uff7f\040\uff7f\044\uff7f\045\uff7f\046\uff7f\052\uff7f\057" +
    "\uff7f\001\002\000\040\004\063\005\074\007\077\010\110" +
    "\012\072\014\055\016\056\020\100\021\103\037\120\040" +
    "\102\044\116\045\053\046\064\052\061\001\002\000\010" +
    "\003\uffcc\053\uffcc\061\uffcc\001\002\000\004\057\uffd8\001" +
    "\002\000\064\003\uff76\004\uff76\005\uff76\006\uff76\007\uff76" +
    "\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016" +
    "\uff76\017\uff76\020\uff76\021\uff76\023\uff76\024\uff76\026\uff76" +
    "\037\uff76\040\uff76\044\uff76\045\uff76\046\uff76\052\uff76\057" +
    "\uff76\001\002\000\060\003\uffce\004\063\005\074\006\025" +
    "\007\077\010\110\011\017\012\072\013\030\014\055\015" +
    "\034\016\056\017\026\020\100\021\103\023\076\037\120" +
    "\040\102\044\116\045\053\046\064\052\061\061\uffce\001" +
    "\002\000\010\003\uffcf\053\uffcf\061\uffcf\001\002\000\006" +
    "\003\264\061\265\001\002\000\064\003\uff77\004\uff77\005" +
    "\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77" +
    "\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\023" +
    "\uff77\024\uff77\026\uff77\037\uff77\040\uff77\044\uff77\045\uff77" +
    "\046\uff77\052\uff77\057\uff77\001\002\000\042\003\267\004" +
    "\063\005\074\007\077\010\110\012\072\014\055\016\056" +
    "\020\100\021\103\037\120\040\102\044\116\045\053\046" +
    "\064\052\061\001\002\000\006\003\270\061\271\001\002" +
    "\000\064\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78" +
    "\017\uff78\020\uff78\021\uff78\023\uff78\024\uff78\026\uff78\037" +
    "\uff78\040\uff78\044\uff78\045\uff78\046\uff78\052\uff78\057\uff78" +
    "\001\002\000\064\003\uff79\004\uff79\005\uff79\006\uff79\007" +
    "\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\023\uff79\024\uff79\026" +
    "\uff79\037\uff79\040\uff79\044\uff79\045\uff79\046\uff79\052\uff79" +
    "\057\uff79\001\002\000\060\003\uffce\004\063\005\074\006" +
    "\025\007\077\010\110\011\017\012\072\013\030\014\055" +
    "\015\034\016\056\017\026\020\100\021\103\023\076\037" +
    "\120\040\102\044\116\045\053\046\064\052\061\053\uffce" +
    "\001\002\000\006\003\273\053\274\001\002\000\064\003" +
    "\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\023\uff7a\024\uff7a\026\uff7a\037\uff7a\040\uff7a" +
    "\044\uff7a\045\uff7a\046\uff7a\052\uff7a\057\uff7a\001\002\000" +
    "\006\003\276\056\275\001\002\000\064\003\101\004\063" +
    "\005\074\006\025\007\077\010\110\011\017\012\072\013" +
    "\030\014\055\015\034\016\056\017\026\020\100\021\103" +
    "\023\076\024\073\026\066\037\120\040\102\044\116\045" +
    "\053\046\064\052\061\057\uffd7\001\002\000\064\003\uff7b" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\023\uff7b\024\uff7b\026\uff7b\037\uff7b\040\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\052\uff7b\057\uff7b\001\002\000\004" +
    "\057\300\001\002\000\064\003\uff7c\004\uff7c\005\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\023\uff7c\024" +
    "\uff7c\026\uff7c\037\uff7c\040\uff7c\044\uff7c\045\uff7c\046\uff7c" +
    "\052\uff7c\057\uff7c\001\002\000\056\003\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\050\uffb1\051" +
    "\uffb1\053\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1\062\123" +
    "\001\002\000\044\003\304\004\063\005\074\007\077\010" +
    "\110\012\072\014\055\016\056\020\100\021\103\037\120" +
    "\040\102\044\116\045\053\046\064\052\061\053\uff88\001" +
    "\002\000\004\053\305\001\002\000\062\003\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\045\uff99" +
    "\046\uff99\050\uff99\051\uff99\053\uff99\055\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\001\002\000\064\003\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4" +
    "\046\uffe4\050\uffe4\051\uffe4\053\uffe4\054\040\055\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000\062\003\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\045\uff9a\046\uff9a\050\uff9a\051\uff9a\053\uff9a\055\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\001\002\000\004\053\310" +
    "\001\002\000\064\003\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4\050\uffe4\051" +
    "\uffe4\053\uffe4\054\040\055\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\001\002\000\062\003\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\045\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\053\uffa4\055\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\001\002\000\022\003\ufff1\004\ufff1\006\ufff1\011" +
    "\ufff1\013\ufff1\015\ufff1\017\ufff1\057\ufff1\001\002\000\056" +
    "\003\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\050\uffb2\051\uffb2\053\uffb2\055\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\123\001\002\000\014\003\uffd9\047\uffd9" +
    "\053\uffd9\060\uffd9\061\uffd9\001\002\000\020\003\321\004" +
    "\046\006\025\011\017\013\030\015\034\017\026\001\002" +
    "\000\004\053\uffdf\001\002\000\004\053\uffda\001\002\000" +
    "\010\003\317\053\uffdc\060\315\001\002\000\004\053\uffdb" +
    "\001\002\000\004\053\uffdd\001\002\000\004\055\uffe2\001" +
    "\002\000\004\055\326\001\002\000\004\055\uffe0\001\002" +
    "\000\074\003\uffe3\004\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\061\uffe3\062\uffe3\001\002\000\072\003" +
    "\uffe5\004\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\001\002\000\022\003\ufff4\004\ufff4\006\ufff4" +
    "\011\ufff4\013\ufff4\015\ufff4\017\ufff4\057\ufff4\001\002\000" +
    "\012\003\036\047\uffd9\052\042\061\uffd9\001\002\000\004" +
    "\057\ufff5\001\002\000\042\003\335\004\063\005\074\007" +
    "\077\010\110\012\072\014\055\016\056\020\100\021\103" +
    "\037\120\040\102\044\116\045\053\046\064\052\061\001" +
    "\002\000\010\003\uffca\053\uffca\061\uffca\001\002\000\010" +
    "\003\uffc8\053\uffc8\061\uffc8\001\002\000\010\002\ufffd\003" +
    "\ufffd\022\ufffd\001\002\000\070\003\uffed\004\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\045\uffed" +
    "\046\uffed\050\uffed\051\uffed\052\uffed\053\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001\002\000\022" +
    "\003\032\004\035\006\025\011\017\013\030\015\034\017" +
    "\026\057\ufff6\001\002\000\004\057\ufff7\001\002\000\004" +
    "\057\ufff8\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\012\002\006\003\010\004\003\006\005\001" +
    "\001\000\010\003\342\004\003\006\005\001\001\000\002" +
    "\001\001\000\022\005\026\007\017\010\020\011\022\012" +
    "\032\016\030\030\021\056\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\341\007\017\010\020\011\022\012\032\016\030\030\021" +
    "\056\023\001\001\000\002\001\001\000\006\013\336\042" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\327\001\001\000\002" +
    "\001\001\000\006\013\040\042\036\001\001\000\002\001" +
    "\001\000\006\013\326\042\036\001\001\000\032\031\322" +
    "\032\114\033\113\034\112\035\111\036\110\037\106\040" +
    "\105\041\104\044\064\045\323\056\120\001\001\000\002" +
    "\001\001\000\014\011\022\012\044\014\046\016\042\056" +
    "\023\001\001\000\004\015\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\040\042\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\011\022\012\044" +
    "\016\030\017\056\021\067\022\103\024\057\025\074\026" +
    "\066\027\053\030\061\031\116\032\114\033\113\034\112" +
    "\035\111\036\110\037\106\040\105\041\104\044\064\056" +
    "\070\001\001\000\002\001\001\000\012\040\312\041\104" +
    "\044\064\056\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\031\306\032\114\033\113\034\112\035\111\036" +
    "\110\037\106\040\105\041\104\044\064\056\120\001\001" +
    "\000\002\001\001\000\006\013\040\042\036\001\001\000" +
    "\012\040\300\041\104\044\064\056\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\011" +
    "\022\012\044\016\030\017\256\021\067\022\103\024\057" +
    "\025\074\026\066\027\053\030\061\031\116\032\114\033" +
    "\113\034\112\035\111\036\110\037\106\040\105\041\104" +
    "\044\064\056\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\031\233\032\114\033\113\034\112\035\111\036" +
    "\110\037\106\040\105\041\104\044\064\056\120\001\001" +
    "\000\002\001\001\000\012\011\022\012\210\043\207\056" +
    "\023\001\001\000\002\001\001\000\012\040\205\041\104" +
    "\044\064\056\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\037\142\040\105\041\104\044\064\056\120\001" +
    "\001\000\002\001\001\000\012\040\121\041\104\044\064" +
    "\056\120\001\001\000\002\001\001\000\004\046\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\126\001\001\000\006\013\141\042\036\001" +
    "\001\000\032\031\131\032\114\033\113\034\112\035\111" +
    "\036\110\037\106\040\105\041\104\044\064\054\130\056" +
    "\120\001\001\000\002\001\001\000\004\055\134\001\001" +
    "\000\002\001\001\000\030\031\135\032\114\033\113\034" +
    "\112\035\111\036\110\037\106\040\105\041\104\044\064" +
    "\056\120\001\001\000\002\001\001\000\004\055\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\032\176\033" +
    "\113\034\112\035\111\036\110\037\106\040\105\041\104" +
    "\044\064\056\120\001\001\000\024\033\175\034\112\035" +
    "\111\036\110\037\106\040\105\041\104\044\064\056\120" +
    "\001\001\000\024\033\146\034\112\035\111\036\110\037" +
    "\106\040\105\041\104\044\064\056\120\001\001\000\002" +
    "\001\001\000\022\034\174\035\111\036\110\037\106\040" +
    "\105\041\104\044\064\056\120\001\001\000\022\034\151" +
    "\035\111\036\110\037\106\040\105\041\104\044\064\056" +
    "\120\001\001\000\002\001\001\000\020\035\173\036\110" +
    "\037\106\040\105\041\104\044\064\056\120\001\001\000" +
    "\020\035\172\036\110\037\106\040\105\041\104\044\064" +
    "\056\120\001\001\000\020\035\171\036\110\037\106\040" +
    "\105\041\104\044\064\056\120\001\001\000\020\035\156" +
    "\036\110\037\106\040\105\041\104\044\064\056\120\001" +
    "\001\000\002\001\001\000\016\036\170\037\106\040\105" +
    "\041\104\044\064\056\120\001\001\000\016\036\161\037" +
    "\106\040\105\041\104\044\064\056\120\001\001\000\002" +
    "\001\001\000\014\037\167\040\105\041\104\044\064\056" +
    "\120\001\001\000\014\037\166\040\105\041\104\044\064" +
    "\056\120\001\001\000\014\037\165\040\105\041\104\044" +
    "\064\056\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\032\200\033\113\034" +
    "\112\035\111\036\110\037\106\040\105\041\104\044\064" +
    "\056\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\050\213\051\211\001\001\000\002\001\001\000\036" +
    "\031\131\032\114\033\113\034\112\035\111\036\110\037" +
    "\106\040\105\041\104\044\064\050\223\052\220\054\221" +
    "\056\120\001\001\000\002\001\001\000\032\031\131\032" +
    "\114\033\113\034\112\035\111\036\110\037\106\040\105" +
    "\041\104\044\064\054\215\056\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\225\001" +
    "\001\000\006\050\223\052\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\031\236\032\114\033\113\034\112\035" +
    "\111\036\110\037\106\040\105\041\104\044\064\056\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\011\022\012\044\016\030" +
    "\017\244\021\067\022\103\024\057\025\074\026\066\027" +
    "\053\030\061\031\116\032\114\033\113\034\112\035\111" +
    "\036\110\037\106\040\105\041\104\044\064\056\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\011" +
    "\022\012\044\016\030\017\252\021\067\022\103\024\057" +
    "\025\074\026\066\027\053\030\061\031\116\032\114\033" +
    "\113\034\112\035\111\036\110\037\106\040\105\041\104" +
    "\044\064\056\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\031\255\032\114\033\113" +
    "\034\112\035\111\036\110\037\106\040\105\041\104\044" +
    "\064\056\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\022\012\044\016\030\022" +
    "\261\023\262\026\066\027\053\030\061\031\116\032\114" +
    "\033\113\034\112\035\111\036\110\037\106\040\105\041" +
    "\104\044\064\056\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\031\265\032\114\033" +
    "\113\034\112\035\111\036\110\037\106\040\105\041\104" +
    "\044\064\056\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\022\012\044\016\030" +
    "\022\261\023\271\026\066\027\053\030\061\031\116\032" +
    "\114\033\113\034\112\035\111\036\110\037\106\040\105" +
    "\041\104\044\064\056\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\011\022\012\044" +
    "\016\030\017\276\021\067\022\103\024\057\025\074\026" +
    "\066\027\053\030\061\031\116\032\114\033\113\034\112" +
    "\035\111\036\110\037\106\040\105\041\104\044\064\056" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\123\001\001\000\032\031\131\032" +
    "\114\033\113\034\112\035\111\036\110\037\106\040\105" +
    "\041\104\044\064\054\302\056\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\305\042\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\310\042" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\123\001\001\000\002\001\001\000\012\011\022\012" +
    "\044\016\317\056\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\031\333" +
    "\032\114\033\113\034\112\035\111\036\110\037\106\040" +
    "\105\041\104\044\064\056\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\340\007\017\010\020\011\022\012\032\016\030" +
    "\030\021\056\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   //AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   //alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   public GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASTiny as = new ASTiny();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= RClass 
            {
              Prog RESULT =null;
		Prog rc = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = rc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RClass ::= CClass RClass 
            {
              Prog RESULT =null;
		Clase c = (Clase)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Prog rc = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 rc.add(c); RESULT = rc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RClass",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RClass ::= 
            {
              Prog RESULT =null;
		 RESULT = as.programa().setFila(1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RClass",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CClass ::= ClassCab RMetodo LLAVE_CI 
            {
              Clase RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Clase c = (Clase)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 c.setFila(id.fila); c.setNombre(id.lex); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CClass",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassCab ::= CLASS IDENTIF LLAVE_AP 
            {
              TokenValue RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.token(c.fila,id.lex); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ClassCab",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassCab ::= CLASS IDENTIF error 
            {
              TokenValue RESULT =null;
		 System.out.println("(Cod.1) Se esperaba una llave '{'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ClassCab",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassCab ::= CLASS error 
            {
              TokenValue RESULT =null;
		 System.out.println("(Cod.2) Se esperaba un identificador de la clase"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ClassCab",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassCab ::= error 
            {
              TokenValue RESULT =null;
		 System.out.println("(Cod.3) Se esperaba la palabra reservada class"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ClassCab",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RMetodo ::= Metodo_aux RMetodo 
            {
              Clase RESULT =null;
		Met m = (Met)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Clase rm = (Clase)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 rm.add(m); RESULT = rm; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RMetodo",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RMetodo ::= Asig2 PYC RMetodo 
            {
              Clase RESULT =null;
		IAsig a = (IAsig)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Clase rm = (Clase)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 rm.add(a); RESULT = rm; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RMetodo",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RMetodo ::= 
            {
              Clase RESULT =null;
		 RESULT = as.clase(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RMetodo",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RMetodo ::= error PYC 
            {
              Clase RESULT =null;
		 System.out.println("(Cod.4) Declaración incorrecta"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RMetodo",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Metodo_aux ::= TTipo Metodo 
            {
              Met RESULT =null;
		TSimpleOArray t = (TSimpleOArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Met m = (Met)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 m.setTtipo(t); m.setFila(t.getFila()); RESULT = m; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Metodo_aux",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Metodo_aux ::= Metodo 
            {
              Met RESULT =null;
		Met m = (Met)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = m; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Metodo_aux",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Metodo_aux ::= error 
            {
              Met RESULT =null;
		 System.out.println("(Cod.5) Se esperaba un identificador"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Metodo_aux",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Metodo ::= IDENTIF PAR_AP PParams PAR_CI LLAVE_AP RIns LLAVE_CI 
            {
              Met RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Params params = (Params)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue ll = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		BloqueIns bloque = (BloqueIns)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 Met met = as.metodo(id.lex,params.setFila(p.fila),bloque.setFila(ll.fila)); 
                       met.setFila(id.fila); RESULT = met; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Metodo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Metodo ::= IDENTIF PAR_AP PParams PAR_CI error 
            {
              Met RESULT =null;
		 System.out.println("(Cod.6) Se esperaba '{'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Metodo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Metodo ::= IDENTIF PAR_AP error 
            {
              Met RESULT =null;
		 System.out.println("(Cod.7) Parámetro incorrecto"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Metodo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Metodo ::= IDENTIF error 
            {
              Met RESULT =null;
		 System.out.println("(Cod.8) Se esperaba '(', '=' o ';'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Metodo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TTipo ::= Tipo_simple R1Corchetes 
            {
              TSimpleOArray RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Corchetes corch = (Corchetes)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.tipoSimpleOArray(t, corch).setFila(t.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TTipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TTipo ::= IdCorch 
            {
              TSimpleOArray RESULT =null;
		IdCorchTemp i = (IdCorchTemp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.tipoSimpleOArray(i).setFila(i.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TTipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TTipo ::= VOID 
            {
              TSimpleOArray RESULT =null;
		TokenValue v = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Corchetes c = as.corchetes();
                       Tipo t = as.tipoVoid().setFila(v.fila);
                       TSimpleOArray ts = as.tipoSimpleOArray(t, c).setFila(v.fila);
                       RESULT = ts; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TTipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo_simple ::= BOOLEAN 
            {
              Tipo RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.tipoBoolean().setFila(t.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo_simple",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo_simple ::= INT 
            {
              Tipo RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.tipoInt().setFila(t.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo_simple",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo_simple ::= DOUBLE 
            {
              Tipo RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.tipoDouble().setFila(t.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo_simple",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo_simple ::= CHAR 
            {
              Tipo RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.tipoChar().setFila(t.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo_simple",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IdCorch ::= IDENTIF R1Corchetes 
            {
              IdCorchTemp RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Corchetes corch = (Corchetes)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 IdCorchTemp i = as.idCorchTemp().setFila(id.fila);
                       i.setId(id.lex); i.setCorchetes(corch);
                       RESULT = i; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IdCorch",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // R1Corchetes ::= CCorchetes R1Corchetes 
            {
              Corchetes RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Corchetes t = (Corchetes)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 t.add(e); RESULT = t; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R1Corchetes",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // R1Corchetes ::= 
            {
              Corchetes RESULT =null;
		 RESULT = as.corchetes(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R1Corchetes",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CCorchetes ::= CORCH_AP Expr_opt CORCH_CI 
            {
              Expr RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e.setFila(c.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CCorchetes",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr_opt ::= E0 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr_opt",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr_opt ::= 
            {
              Expr RESULT =null;
		 RESULT = as.nulo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr_opt",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr_opt ::= error 
            {
              Expr RESULT =null;
		 System.out.println("(Cod.9) Se esperaba una expresión o nada entre corchetes"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr_opt",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PParams ::= PParam RParam 
            {
              Params RESULT =null;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Params rp = (Params)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 rp.add(p); RESULT = rp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PParams",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PParams ::= 
            {
              Params RESULT =null;
		 RESULT = as.parametros(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PParams",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RParam ::= COMA PParam RParam 
            {
              Params RESULT =null;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Params rp = (Params)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 rp.add(p); RESULT = rp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RParam",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RParam ::= 
            {
              Params RESULT =null;
		 RESULT = as.parametros(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RParam",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RParam ::= COMA error 
            {
              Params RESULT =null;
		 System.out.println("(Cod.10) Se esperaba un tipo"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RParam",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RParam ::= error 
            {
              Params RESULT =null;
		 System.out.println("(Cod.11) Se esperaba un tipo"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RParam",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PParam ::= TTipo IDENTIF 
            {
              Param RESULT =null;
		TSimpleOArray t = (TSimpleOArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.parametro(t,id.lex).setFila(t.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PParam",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RIns ::= IIns RIns 
            {
              BloqueIns RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		BloqueIns ri = (BloqueIns)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 ri.add(i); RESULT = ri; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RIns",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RIns ::= 
            {
              BloqueIns RESULT =null;
		 RESULT = as.bloque(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RIns",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IIns ::= Ins_sin PYC 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = i; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIns",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IIns ::= If 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = i; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIns",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IIns ::= For 
            {
              Ins RESULT =null;
		Ins f = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIns",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IIns ::= Ins_sin error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.12) Inicio de instrucción no válido"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIns",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IIns ::= error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.13) Declaración incorrecta (método, atributo o expresion)");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IIns",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Ins_sin ::= Asig 
            {
              Ins RESULT =null;
		Ins a = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins_sin",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Ins_sin ::= Return 
            {
              Ins RESULT =null;
		Ins r = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = r; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins_sin",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Ins_sin_opt ::= Ins_sin 
            {
              Ins RESULT =null;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = i; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins_sin_opt",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Ins_sin_opt ::= 
            {
              Ins RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins_sin_opt",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Asig ::= Asig2 
            {
              Ins RESULT =null;
		IAsig a = (IAsig)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asig",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Asig ::= IdCorch IGUAL E0 
            {
              Ins RESULT =null;
		IdCorchTemp id = (IdCorchTemp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Declar d = as.declaracion(id).setFila(id.getFila());
                       RESULT = as.asignacion(d,e).setFila(id.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asig",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Asig ::= E0 
            {
              Ins RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.expresion(e).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asig",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Asig2 ::= PParam IGUAL E0 
            {
              IAsig RESULT =null;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Declar d = as.declaracion(p.getTtipo(),p.getId()).setFila(p.getFila());
                       RESULT = as.asignacion(d,e).setFila(p.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asig2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Asig2 ::= PParam 
            {
              IAsig RESULT =null;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Declar d = as.declaracion(p.getTtipo(),p.getId()).setFila(p.getFila());
                     RESULT = as.asignacion(d,null).setFila(p.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asig2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Asig2 ::= PParam IGUAL error 
            {
              IAsig RESULT =null;
		 System.out.println("(Cod.14) Expresión incorrecta o sin ';'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asig2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E0 ::= E1 INTERROG E1 DOS_PUNTOS E1 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr g = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.opTernario(e,f,g).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E0 ::= E1 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E1 ::= E1 AND E2 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.and(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E1 ::= E1 OR E2 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.or(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E1 ::= E2 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E2 ::= E2 IGUAL_COMP E3 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.igualComp(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E2 ::= E2 DIST_COMP E3 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.distComp(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E2 ::= E3 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E3 ::= E3 MENOR E4 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.menor(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E3 ::= E3 MENOR_IGUAL E4 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.menorIgual(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E3 ::= E3 MAYOR E4 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mayor(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E3 ::= E3 MAYOR_IGUAL E4 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mayorIgual(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E4 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E4 ::= E4 MAS E5 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.suma(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E4 ::= E4 MENOS E5 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.resta(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= E5 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= E5 POR E6 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mul(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= E5 DIV E6 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.div(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E5 ::= E5 MOD E6 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mod(e,f).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E5 ::= E6 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= NEGADO E6 
            {
              Expr RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.negado(e).setFila(n.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E6 ::= MAS_MAS E7 
            {
              Expr RESULT =null;
		TokenValue m = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.masMasIzq(e).setFila(m.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= MENOS_MENOS E7 
            {
              Expr RESULT =null;
		TokenValue m = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.menosMenosIzq(e).setFila(m.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E6 ::= MAS E7 
            {
              Expr RESULT =null;
		TokenValue m = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.masIzq(e).setFila(m.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E6 ::= MENOS E7 
            {
              Expr RESULT =null;
		TokenValue m = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.menosIzq(e).setFila(m.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E6 ::= E7 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E7 ::= E8 MAS_MAS 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.masMasDer(e).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E7 ::= E8 MENOS_MENOS 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.menosMenosDer(e).setFila(e.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E7 ::= E7 Extras 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ExtraValor extra = (ExtraValor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 e.setExtra(extra); RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E7 ::= E8 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E8 ::= TRUE 
            {
              Expr RESULT =null;
		TokenValue val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.bool(val.lex).setFila(val.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E8 ::= FALSE 
            {
              Expr RESULT =null;
		TokenValue val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.bool(val.lex).setFila(val.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E8 ::= VALOR_INT 
            {
              Expr RESULT =null;
		TokenValue val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(val.lex).setFila(val.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E8 ::= VALOR_DOUBLE 
            {
              Expr RESULT =null;
		TokenValue val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.doub(val.lex).setFila(val.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E8 ::= VALOR_CHAR 
            {
              Expr RESULT =null;
		TokenValue val = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.charac(val.lex).setFila(val.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E8 ::= PAR_AP E0 PAR_CI R1Corchetes 
            {
              Expr RESULT =null;
		TokenValue pa = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue pc = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Corchetes corch = (Corchetes)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 VValorExtraArray extraC = as.extraArray(corch).setFila(pc.fila);
                       e.setExtra(extraC); RESULT = e.setFila(pa.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E8 ::= NULL 
            {
              Expr RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nulo().setFila(n.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E8 ::= THIS 
            {
              Expr RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.vthis().setFila(t.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E8 ::= NEW Nuevo_obj 
            {
              Expr RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o.setFila(n.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E8 ::= Variable 
            {
              Expr RESULT =null;
		Expr var = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = var; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Nuevo_obj ::= TTipo PAR_AP Args PAR_CI 
            {
              Expr RESULT =null;
		TSimpleOArray t = (TSimpleOArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Argumentos args = (Argumentos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.nuevoObjClase(t,args.setFila(p.fila)).setFila(t.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Nuevo_obj",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Nuevo_obj ::= TTipo Array_init_opt 
            {
              Expr RESULT =null;
		TSimpleOArray t = (TSimpleOArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayInit init = (ArrayInit)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nuevoObjArray(t,init).setFila(t.getFila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Nuevo_obj",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Nuevo_obj ::= TTipo PAR_AP error 
            {
              Expr RESULT =null;
		 System.out.println("(Cod.15) Error en los argumentos"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Nuevo_obj",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Nuevo_obj ::= error 
            {
              Expr RESULT =null;
		 System.out.println("(Cod.16) Se esperaba un tipo"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Nuevo_obj",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Variable ::= IdCorch 
            {
              Expr RESULT =null;
		IdCorchTemp var = (IdCorchTemp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 VValor val = as.valor().setFila(var.getFila());
                       val.setId(var); RESULT = val; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Variable",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Variable ::= IDENTIF PAR_AP Args PAR_CI R1Corchetes 
            {
              Expr RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Argumentos args = (Argumentos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Corchetes corch = (Corchetes)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 VValorExtraArray extraC = as.extraArray(corch); 
                       VValorMet extraMet = as.valorMet(args.setFila(p.fila)).setFila(id.fila);
                       extraMet.setExtra(extraC);
                       extraMet.setId(id.lex); RESULT = extraMet; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Variable",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Variable ::= IDENTIF PAR_AP error 
            {
              Expr RESULT =null;
		 System.out.println("(Cod.17) Argumentos incorrectos o se esperaba ')'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Variable",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Extras ::= PUNTO IDENTIF Var_extra_punto R1Corchetes 
            {
              ExtraValor RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ExtraValorPunto extraP = (ExtraValorPunto)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Corchetes corch = (Corchetes)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 VValorExtraArray extraC = as.extraArray(corch).setFila(id.fila); /*Chapucilla*/
                       extraP.setId(as.valor(id.lex));
                       extraP.setExtra(extraC); RESULT = extraP.setFila(p.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Extras",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Extras ::= PUNTO error 
            {
              ExtraValor RESULT =null;
		 System.out.println("(Cod.18) Se esperaba '('"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Extras",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Var_extra_punto ::= PAR_AP Args PAR_CI 
            {
              ExtraValorPunto RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Argumentos args = (Argumentos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.extraMetodo(args.setFila(p.fila)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Var_extra_punto",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Var_extra_punto ::= 
            {
              ExtraValorPunto RESULT =null;
		 RESULT = as.extraAtrib(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Var_extra_punto",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Var_extra_punto ::= PAR_AP error 
            {
              ExtraValorPunto RESULT =null;
		 System.out.println("(Cod.19) Se esperaba ')'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Var_extra_punto",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RCont_array ::= COMA Cont_array 
            {
              ArrayInit RESULT =null;
		ArrayInit cont = (ArrayInit)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = cont; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RCont_array",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RCont_array ::= 
            {
              ArrayInit RESULT =null;
		 RESULT = as.arrayInit(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RCont_array",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RCont_array ::= COMA error 
            {
              ArrayInit RESULT =null;
		 System.out.println("(Cod.20) Se esperaba una llave '{'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RCont_array",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Cont_array ::= Array_init RCont_array 
            {
              ArrayInit RESULT =null;
		ArrayInit a = (ArrayInit)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayInit cont = (ArrayInit)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cont.add(a); RESULT = cont; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Cont_array",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Array_init_opt ::= Array_init 
            {
              ArrayInit RESULT =null;
		ArrayInit a = (ArrayInit)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Array_init_opt",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Array_init_opt ::= 
            {
              ArrayInit RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Array_init_opt",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Array_init ::= LLAVE_AP Cont_array LLAVE_CI 
            {
              ArrayInit RESULT =null;
		TokenValue ll = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayInit a = (ArrayInit)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = a.setFila(ll.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Array_init",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Array_init ::= LLAVE_AP Args LLAVE_CI 
            {
              ArrayInit RESULT =null;
		TokenValue ll = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Argumentos args = (Argumentos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.arrayInit(args.setFila(ll.fila)).setFila(ll.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Array_init",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Array_init ::= LLAVE_AP Cont_array error 
            {
              ArrayInit RESULT =null;
		 System.out.println("(Cod.21) Se esperaba ';'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Array_init",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Array_init ::= LLAVE_AP error 
            {
              ArrayInit RESULT =null;
		 System.out.println("(Cod.22) Se esperaba una expresión, ',' o '}'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Array_init",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Args ::= E0 RArgumento 
            {
              Argumentos RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Argumentos args = (Argumentos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 args.add(e); RESULT = args; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Args ::= 
            {
              Argumentos RESULT =null;
		 RESULT = as.argumentos(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // RArgumento ::= COMA E0 RArgumento 
            {
              Argumentos RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Argumentos args = (Argumentos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 args.add(e); RESULT = args; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RArgumento",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // RArgumento ::= 
            {
              Argumentos RESULT =null;
		 RESULT = as.argumentos(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RArgumento",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // RArgumento ::= COMA E0 error 
            {
              Argumentos RESULT =null;
		 System.out.println("(Cod.23) Se esperaba una coma, ')' o '}'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RArgumento",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // If ::= IF PAR_AP E0 PAR_CI LLAVE_AP RIns LLAVE_CI Else 
            {
              Ins RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue ll = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		BloqueIns bloqIf = (BloqueIns)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		BloqueIns bloqElse = (BloqueIns)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.iif(e,bloqIf.setFila(ll.fila),bloqElse).setFila(i.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // If ::= IF PAR_AP E0 PAR_CI error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.24) Se esperaba una llave '{'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // If ::= IF PAR_AP E0 error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.25) Se esperaba un paréntesis ')'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // If ::= IF PAR_AP error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.26) Expresión para condición inválida"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // If ::= IF error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.27) Se esperaba un paréntesis '('"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Else ::= ELSE LLAVE_AP RIns LLAVE_CI 
            {
              BloqueIns RESULT =null;
		TokenValue ll = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		BloqueIns b = (BloqueIns)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = b.setFila(ll.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Else",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Else ::= 
            {
              BloqueIns RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Else",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Else ::= ELSE error 
            {
              BloqueIns RESULT =null;
		 System.out.println("(Cod.28) Se esperaba una llave '{'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Else",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // For ::= FOR PAR_AP Ins_sin_opt PYC E0 PYC Ins_sin_opt PAR_CI LLAVE_AP RIns LLAVE_CI 
            {
              Ins RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		Ins in = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Ins it = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue ll = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		BloqueIns b = (BloqueIns)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.ffor(in,c,it,b.setFila(ll.fila)).setFila(f.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // For ::= FOR PAR_AP Ins_sin_opt PYC E0 PYC Ins_sin_opt PAR_CI error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.29) Se esperaba una llave '{'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // For ::= FOR PAR_AP Ins_sin_opt PYC E0 PYC Ins_sin_opt error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.30) Se esperaba un paréntesis ')'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // For ::= FOR PAR_AP Ins_sin_opt PYC E0 error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.32) Se esperaba un ';'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // For ::= FOR PAR_AP Ins_sin_opt PYC error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.33) Expresión para condición inválida"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // For ::= FOR PAR_AP Ins_sin_opt error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.34) Se esperaba un ';'"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // For ::= FOR error 
            {
              Ins RESULT =null;
		 System.out.println("(Cod.36) Se esperaba un '('"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Return ::= RETURN E0 
            {
              Ins RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.returnNoVoid(e).setFila(r.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Return ::= RETURN 
            {
              Ins RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.returnVoid().setFila(r.fila); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

